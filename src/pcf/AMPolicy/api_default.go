/*
 * Npcf_AMPolicyControl
 *
 * Access and Mobility Policy Control Service API
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package AMPolicy

import (
	"free5gc/lib/http_wrapper"
	"free5gc/lib/openapi/models"
	"free5gc/src/pcf/pcf_handler/pcf_message"

	"github.com/gin-gonic/gin"
)

func PoliciesPolAssoIdDelete(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["polAssoId"], _ = c.Params.Get("polAssoId")
	channelMsg := pcf_message.NewHttpChannelMessage(pcf_message.EventAMPolicyDelete, req)

	pcf_message.SendMessage(channelMsg)
	recvMsg := <-channelMsg.HttpChannel
	HTTPResponse := recvMsg.HTTPResponse
	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PoliciesPolAssoIdGet -
func PoliciesPolAssoIdGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["polAssoId"], _ = c.Params.Get("polAssoId")
	channelMsg := pcf_message.NewHttpChannelMessage(pcf_message.EventAMPolicyGet, req)

	pcf_message.SendMessage(channelMsg)
	recvMsg := <-channelMsg.HttpChannel
	HTTPResponse := recvMsg.HTTPResponse
	c.JSON(HTTPResponse.Status, HTTPResponse.Body)

}

// PoliciesPolAssoIdUpdatePost -
func PoliciesPolAssoIdUpdatePost(c *gin.Context) {
	var policyAssociationUpdateRequest models.PolicyAssociationUpdateRequest
	c.BindJSON(&policyAssociationUpdateRequest)
	req := http_wrapper.NewRequest(c.Request, policyAssociationUpdateRequest)
	req.Params["ReqURI"] = c.Request.RequestURI
	req.Params["polAssoId"], _ = c.Params.Get("polAssoId")
	channelMsg := pcf_message.NewHttpChannelMessage(pcf_message.EventAMPolicyUpdate, req)

	pcf_message.SendMessage(channelMsg)
	recvMsg := <-channelMsg.HttpChannel
	HTTPResponse := recvMsg.HTTPResponse
	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PoliciesPost -
func PoliciesPost(c *gin.Context) {
	var policyAssociationRequest models.PolicyAssociationRequest
	c.BindJSON(&policyAssociationRequest)
	req := http_wrapper.NewRequest(c.Request, policyAssociationRequest)
	req.Params["ReqURI"] = c.Request.RequestURI
	channelMsg := pcf_message.NewHttpChannelMessage(pcf_message.EventAMPolicyCreate, req)

	pcf_message.SendMessage(channelMsg)
	recvMsg := <-channelMsg.HttpChannel
	HTTPResponse := recvMsg.HTTPResponse
	c.JSON(HTTPResponse.Status, HTTPResponse.Body)

}

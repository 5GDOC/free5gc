/*
 * Npcf_SMPolicyControl
 *
 * Session Management Policy Control Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package SMPolicy_test

import (
	"context"
	"flag"
	"free5gc/lib/CommonConsumerTestData/PCF/TestSMPolicy"
	"free5gc/lib/Npcf_SMPolicy"
	"free5gc/lib/openapi/models"

	"free5gc/src/pcf/pcf_context"
	"free5gc/src/pcf/pcf_service"
	"free5gc/src/pcf/pcf_util"

	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/urfave/cli"
)

func pcfInit() {
	flags := flag.FlagSet{}
	c := cli.NewContext(nil, &flags, nil)
	pcf := &pcf_service.PCF{}
	pcf.Initialize(c)
	go pcf.Start()
	time.Sleep(100 * time.Millisecond)
}

func TestCreateSMPolicy(t *testing.T) {
	pcfInit()
	configuration := Npcf_SMPolicy.NewConfiguration()
	configuration.SetBasePath(pcf_util.PCF_BASIC_PATH + pcf_context.SmUri)
	client := Npcf_SMPolicy.NewAPIClient(configuration)

	// get test data
	smReqData123 := TestSMPolicy.CreateTestData()
	smReqData12345 := TestSMPolicy.CreateTestData12345()
	pcf_context.PCF_Self().NewPCFUe(smReqData123.Supi)
	pcf_context.PCF_Self().NewPCFUe(smReqData12345.Supi)

	//Test Create
	smReqData := TestSMPolicy.CreateTestData()
	_, httpRsp, err := client.DefaultApi.SmPoliciesPost(context.Background(), smReqData)
	assert.True(t, err == nil)
	assert.True(t, httpRsp != nil)
	assert.Equal(t, "201 Created", httpRsp.Status)

	// Test Get
	_, httpRsp, err = client.DefaultApi.SmPoliciesSmPolicyIdGet(context.Background(), "123")
	assert.True(t, err == nil)
	assert.True(t, httpRsp != nil)
	assert.Equal(t, "200 OK", httpRsp.Status)

	//Test Update
	smUpData := TestSMPolicy.UpdateTestData()
	_, httpRsp, err = client.DefaultApi.SmPoliciesSmPolicyIdUpdatePost(context.Background(), "123", smUpData)
	assert.True(t, err == nil)
	assert.True(t, httpRsp != nil)
	assert.Equal(t, "200 OK", httpRsp.Status)

	//Test Delete
	smDelData := TestSMPolicy.DeldateTestData()
	httpRsp, err = client.DefaultApi.SmPoliciesSmPolicyIdDeletePost(context.Background(), "123", smDelData)
	assert.True(t, err == nil)
	assert.True(t, httpRsp != nil)
	assert.Equal(t, "204 No Content", httpRsp.Status)

	//-----------------------------------------------------------------------------------------------//
	//test Create 400 bad request
	var smReqDataTest models.SmPolicyContextData
	_, httpRsp, err = client.DefaultApi.SmPoliciesPost(context.Background(), smReqDataTest)
	assert.True(t, err != nil)
	assert.True(t, httpRsp != nil)
	assert.Equal(t, "400 Bad Request", httpRsp.Status)

	//test Get 404 not found
	_, httpRsp, err = client.DefaultApi.SmPoliciesSmPolicyIdGet(context.Background(), "3210")
	assert.True(t, err != nil)
	assert.True(t, httpRsp != nil)
	assert.Equal(t, "404 Not Found", httpRsp.Status)

	//Test Delete 404 not found
	httpRsp, err = client.DefaultApi.SmPoliciesSmPolicyIdDeletePost(context.Background(), "123", smDelData)
	assert.True(t, err != nil)
	assert.True(t, httpRsp != nil)
	assert.Equal(t, "404 Not Found", httpRsp.Status)

	//Test Update (No Create)
	_, httpRsp, err = client.DefaultApi.SmPoliciesSmPolicyIdUpdatePost(context.Background(), "123", smUpData)
	assert.True(t, err != nil)
	assert.True(t, httpRsp != nil)
	assert.Equal(t, "403 Forbidden", httpRsp.Status)

	//Test Create 123
	_, httpRsp, err = client.DefaultApi.SmPoliciesPost(context.Background(), smReqData)
	assert.True(t, err == nil)
	assert.True(t, httpRsp != nil)
	assert.Equal(t, "201 Created", httpRsp.Status)

	//Test Create 12345
	smReqDataTest12345 := TestSMPolicy.CreateTestData12345()
	_, httpRsp, err = client.DefaultApi.SmPoliciesPost(context.Background(), smReqDataTest12345)
	assert.True(t, err == nil)
	assert.True(t, httpRsp != nil)
	assert.Equal(t, "201 Created", httpRsp.Status)

	//Test GET 123
	_, httpRsp, err = client.DefaultApi.SmPoliciesSmPolicyIdGet(context.Background(), "123")
	assert.True(t, err == nil)
	assert.True(t, httpRsp != nil)
	assert.Equal(t, "200 OK", httpRsp.Status)

	//Test GET 12345
	_, httpRsp, err = client.DefaultApi.SmPoliciesSmPolicyIdGet(context.Background(), "12345")
	assert.True(t, err == nil)
	assert.True(t, httpRsp != nil)
	assert.Equal(t, "200 OK", httpRsp.Status)

	//Test Update Not found 321
	_, httpRsp, err = client.DefaultApi.SmPoliciesSmPolicyIdUpdatePost(context.Background(), "321", smUpData)
	assert.True(t, err != nil)
	assert.True(t, httpRsp != nil)
	assert.Equal(t, "403 Forbidden", httpRsp.Status)

	//Test Update No UpdateTestData
	var smUpDataNoData models.SmPolicyUpdateContextData
	_, httpRsp, err = client.DefaultApi.SmPoliciesSmPolicyIdUpdatePost(context.Background(), "123", smUpDataNoData)
	assert.True(t, err != nil)
	assert.True(t, httpRsp != nil)
	assert.Equal(t, "400 Bad Request", httpRsp.Status)

	//Test Repeat Create 123
	_, httpRsp, err = client.DefaultApi.SmPoliciesPost(context.Background(), smReqData)
	assert.True(t, err == nil)
	assert.True(t, httpRsp != nil)
	assert.Equal(t, "200 OK", httpRsp.Status)

}

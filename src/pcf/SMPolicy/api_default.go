/*
 * Npcf_SMPolicyControl
 *
 * Session Management Policy Control Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package SMPolicy

import (
	"fmt"
	"free5gc/lib/http_wrapper"
	"free5gc/lib/openapi/models"
	"free5gc/src/pcf/pcf_handler/pcf_message"

	"github.com/gin-gonic/gin"
)

// SmPoliciesPost -
func CreateSmPolicy(c *gin.Context) {
	var smPolicyContextData models.SmPolicyContextData
	c.BindJSON(&smPolicyContextData)

	req := http_wrapper.NewRequest(c.Request, smPolicyContextData)
	req.Params["ReqURI"] = c.Request.RequestURI
	channelMsg := pcf_message.NewHttpChannelMessage(pcf_message.EventSMPolicyCreate, req)

	pcf_message.SendMessage(channelMsg)
	recvMsg := <-channelMsg.HttpChannel
	HTTPResponse := recvMsg.HTTPResponse

	if HTTPResponse.Header == nil {
		c.JSON(HTTPResponse.Status, HTTPResponse.Body)
		fmt.Println("nil")
	} else {
		c.Redirect(303, HTTPResponse.Header["Location"][0])
	}
}

// SmPoliciesSmPolicyIdDeletePost -
func DeleteSmPolicy(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["ReqURI"] = c.Request.RequestURI
	channelMsg := pcf_message.NewHttpChannelMessage(pcf_message.EventSMPolicyDelete, req)

	pcf_message.SendMessage(channelMsg)
	recvMsg := <-channelMsg.HttpChannel
	HTTPResponse := recvMsg.HTTPResponse
	c.JSON(HTTPResponse.Status, HTTPResponse.Body)

}

// SmPoliciesSmPolicyIdGet -
func GetSmPolicy(c *gin.Context) {

	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["ReqURI"] = c.Request.RequestURI
	channelMsg := pcf_message.NewHttpChannelMessage(pcf_message.EventSMPolicyGet, req)

	pcf_message.SendMessage(channelMsg)
	recvMsg := <-channelMsg.HttpChannel
	HTTPResponse := recvMsg.HTTPResponse
	c.JSON(HTTPResponse.Status, HTTPResponse.Body)

}

// SmPoliciesSmPolicyIdUpdatePost -
func UpdateSmPolicy(c *gin.Context) {
	var smPolicyUpdateContextData models.SmPolicyUpdateContextData
	c.BindJSON(&smPolicyUpdateContextData)
	req := http_wrapper.NewRequest(c.Request, smPolicyUpdateContextData)
	req.Params["ReqURI"] = c.Request.RequestURI
	channelMsg := pcf_message.NewHttpChannelMessage(pcf_message.EventSMPolicyUpdate, req)

	pcf_message.SendMessage(channelMsg)
	recvMsg := <-channelMsg.HttpChannel
	HTTPResponse := recvMsg.HTTPResponse
	c.JSON(HTTPResponse.Status, HTTPResponse.Body)

}

// Nudr-Notify-smpolicy
func NudrNotify(c *gin.Context) {
	var policyDataChangeNotification models.PolicyDataChangeNotification
	c.BindJSON(&policyDataChangeNotification)

	req := http_wrapper.NewRequest(c.Request, policyDataChangeNotification)
	req.Params["ReqURI"] = c.Request.RequestURI
	channelMsg := pcf_message.NewHttpChannelMessage(pcf_message.EventSMPolicyNotify, req)

	pcf_message.SendMessage(channelMsg)
	recvMsg := <-channelMsg.HttpChannel
	HTTPResponse := recvMsg.HTTPResponse
	c.JSON(HTTPResponse.Status, HTTPResponse.Body)

}
